name: Java CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build JAR
        run: |
          mvn clean package -DskipTests
          ls -lh target/

      - name: Encode JAR to Base64
        run: |
          base64 target/*.jar > encoded.txt

      - name: Upload encoded JAR
        uses: actions/upload-artifact@v4
        with:
          name: encoded-jar
          path: encoded.txt

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download encoded JAR
        uses: actions/download-artifact@v4
        with:
          name: encoded-jar
          path: .

      - name: Copy encoded JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: encoded.txt
          target: /home/${{ secrets.EC2_USER }}/
          overwrite: true

      - name: SSH into EC2 and deploy app
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            
            FILE="/home/${{ secrets.EC2_USER }}/encoded.txt"
            JAR="/home/${{ secrets.EC2_USER }}/app.jar"
            LOG="/home/${{ secrets.EC2_USER }}/app.log"
            PORT=8080  # Change this to your app's port
            
            # Verify encoded file exists and is a file
            if [ -d "$FILE" ]; then
              echo "ERROR: $FILE is a directory; removing it."
              rm -rf "$FILE"
              exit 1
            fi
            
            if [ ! -f "$FILE" ]; then
              echo "ERROR: $FILE not found"
              exit 1
            fi
            
            if [ ! -s "$FILE" ]; then
              echo "ERROR: $FILE is empty"
              exit 1
            fi
            
            echo "Decoding JAR..."
            base64 -d "$FILE" > "$JAR"
            
            # Verify decoded JAR is valid
            if [ ! -s "$JAR" ]; then
              echo "ERROR: Decoded JAR is empty"
              exit 1
            fi
            
            echo "Stopping old app..."
            # Kill by port to ensure we stop the right process
            if lsof -ti:$PORT > /dev/null 2>&1; then
              kill $(lsof -ti:$PORT) || true
              sleep 3
            fi
            
            # Fallback: kill any java processes running the jar
            pkill -f "java -jar.*app.jar" || true
            sleep 2
            
            # Verify port is free
            if lsof -ti:$PORT > /dev/null 2>&1; then
              echo "ERROR: Port $PORT is still in use after killing processes"
              lsof -i:$PORT
              exit 1
            fi
            
            echo "Starting new app..."
            # Start with explicit output redirection
            nohup java -jar "$JAR" > "$LOG" 2>&1 &
            
            echo "Waiting for app to start (30 seconds max)..."
            for i in {1..30}; do
              sleep 1
              
              # Check if process is running
              if ! pgrep -f "java -jar.*app.jar" > /dev/null; then
                echo "ERROR: Process died after $i seconds"
                echo "=== Last 50 lines of log ==="
                tail -n 50 "$LOG" 2>/dev/null || echo "No log file found"
                exit 1
              fi
              
              # Check if port is open (app is listening)
              if lsof -ti:$PORT > /dev/null 2>&1; then
                echo "SUCCESS: App is running on port $PORT after $i seconds"
                echo "=== Last 20 lines of log ==="
                tail -n 20 "$LOG"
                exit 0
              fi
              
              echo "Waiting... ($i/30)"
            done
            
            # If we get here, timeout occurred
            echo "ERROR: App did not start listening on port $PORT within 30 seconds"
            echo "=== Full application log ==="
            cat "$LOG" 2>/dev/null || echo "No log file found"
            echo "=== Process status ==="
            pgrep -a -f "java -jar" || echo "No java processes found"
            exit 1